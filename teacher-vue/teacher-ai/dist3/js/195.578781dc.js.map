{"version":3,"file":"js/195.578781dc.js","mappings":"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","sources":["webpack://teacher-ai/./src/api/model.js","webpack://teacher-ai/./src/views/ModelManageView.vue","webpack://teacher-ai/./src/views/ModelManageView.vue?38bf"],"sourcesContent":["import request from '@/utils/request'\r\n\r\nexport const getModelPage = (params) =>\r\n  request.get('/teacher/model', { params })\r\n\r\nexport const deleteModels = (ids) =>\r\n  request.delete('/teacher/model', {\r\n    params: { ids },\r\n    paramsSerializer: {\r\n      indexes: null // 禁用数组索引格式\r\n    }\r\n  })\r\n\r\nexport const createModel = (data) =>\r\n  request.post('/teacher/model', data)\r\n\r\nexport const updateModel = (data) =>\r\n  request.put('/teacher/model', data)\r\n\r\nexport const getModelDetail = (id) =>\r\n  request.get(`/teacher/model/${id}`)","<template>\r\n  <div class=\"model-manage\">\r\n    <!-- 操作工具栏 -->\r\n    <div class=\"toolbar\">\r\n      <el-button type=\"primary\" @click=\"handleCreate\">新建模型</el-button>\r\n      <el-button type=\"danger\" @click=\"batchDelete\">批量删除</el-button>\r\n    </div>\r\n\r\n    <!-- 模型表格 -->\r\n    <el-table\r\n      v-loading=\"loading\"\r\n      :data=\"models\"\r\n      border\r\n      stripe\r\n      @selection-change=\"handleSelectionChange\">\r\n      <el-table-column type=\"selection\" width=\"55\" />\r\n      <el-table-column prop=\"modelName\" label=\"模型名称\" />\r\n      <el-table-column prop=\"baseUrl\" label=\"API地址\" />\r\n      <el-table-column label=\"操作\" width=\"200\">\r\n        <template #default=\"{row}\">\r\n          <el-button size=\"small\" @click=\"handleEdit(row)\">编辑</el-button>\r\n          <el-button size=\"small\" type=\"danger\" @click=\"handleDelete(row.id)\">删除</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 分页组件 -->\r\n    <el-pagination\r\n      v-model:current-page=\"pageNo\"\r\n      v-model:page-size=\"pageSize\"\r\n      :total=\"total\"\r\n      layout=\"total, sizes, prev, pager, next\"\r\n      :page-sizes=\"[10, 20, 30]\"\r\n      background\r\n    />\r\n\r\n    <!-- 模型表单弹窗 -->\r\n    <el-dialog v-model=\"dialogVisible\" title=\"模型配置\">\r\n      <el-form :model=\"formData\" label-width=\"120px\">\r\n        <el-form-item label=\"模型名称\" prop=\"modelName\">\r\n          <el-input v-model=\"formData.modelName\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"API地址\" prop=\"baseUrl\">\r\n          <el-input v-model=\"formData.baseUrl\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"API密钥\" prop=\"apiKey\">\r\n          <el-input v-model=\"formData.apiKey\" show-password />\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleSubmit\">确认</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, watch } from 'vue'\r\nimport { ElMessage, ElMessageBox } from 'element-plus'\r\nimport {\r\n  getModelPage,\r\n  deleteModels,\r\n  createModel,\r\n  updateModel,\r\n  getModelDetail\r\n} from '@/api/model'\r\n\r\n// 分页数据\r\nconst pageNo = ref(1)\r\nconst pageSize = ref(10)\r\nconst total = ref(0)\r\nconst models = ref([])\r\nconst loading = ref(false)\r\n\r\n// 表单相关\r\nconst dialogVisible = ref(false)\r\nconst formData = ref({\r\n  id: null,\r\n  modelName: '',\r\n  baseUrl: '',\r\n  apiKey: ''\r\n})\r\n\r\n// 选中项\r\nconst selectedIds = ref([])\r\n\r\n// 获取模型列表\r\nconst fetchModels = async () => {\r\n  loading.value = true\r\n  try {\r\n    const res = await getModelPage({\r\n      pageNo: pageNo.value,\r\n      pageSize: pageSize.value\r\n    })\r\n    models.value = res.data.data.records\r\n    total.value = res.data.data.total\r\n  } catch (error) {\r\n    ElMessage.error('数据加载失败')\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 监听分页变化\r\nwatch([pageNo, pageSize], fetchModels)\r\n\r\n// 初始化加载\r\nfetchModels()\r\n\r\n// 批量选择\r\nconst handleSelectionChange = (selection) => {\r\n  selectedIds.value = selection.map(item => item.id)\r\n}\r\n\r\n// 删除单个\r\nconst handleDelete = async (id) => {\r\n  try {\r\n    await ElMessageBox.confirm('确定删除该模型？', '删除确认', {\r\n      confirmButtonText: '确定',\r\n      cancelButtonText: '取消',\r\n      type: 'warning'\r\n    })\r\n    await deleteModels([id])\r\n    ElMessage.success('删除成功')\r\n    fetchModels()\r\n  } catch (error) {\r\n    if (error !== 'cancel') {\r\n      ElMessage.error('删除失败：' + error.message)\r\n    }\r\n  }\r\n}\r\n\r\n// 批量删除\r\nconst batchDelete = async () => {\r\n  if (selectedIds.value.length === 0) {\r\n    ElMessage.warning('请选择要删除的模型')\r\n    return\r\n  }\r\n  \r\n  try {\r\n    await ElMessageBox.confirm(`确认删除选中的${selectedIds.value.length}个模型？`, '批量删除', {\r\n      confirmButtonText: '确定',\r\n      cancelButtonText: '取消',\r\n      type: 'warning'\r\n    })\r\n    await deleteModels(selectedIds.value)\r\n    ElMessage.success('批量删除成功')\r\n    fetchModels()\r\n  } catch (error) {\r\n    if (error !== 'cancel') {\r\n      ElMessage.error('删除失败：' + error.message)\r\n    }\r\n  }\r\n}\r\n\r\n// 打开表单\r\nconst handleCreate = () => {\r\n  formData.value = { id: null, modelName: '', baseUrl: '', apiKey: '' }\r\n  dialogVisible.value = true\r\n}\r\n\r\n// 编辑\r\nconst handleEdit = async (row) => {\r\n  try {\r\n    const res = await getModelDetail(row.id)\r\n    formData.value = { ...res.data.data }\r\n    dialogVisible.value = true\r\n  } catch (error) {\r\n    ElMessage.error('获取模型详情失败')\r\n  }\r\n}\r\n\r\n// 提交表单\r\nconst handleSubmit = async () => {\r\n  try {\r\n    let response\r\n    if (formData.value.id) {\r\n      response = await updateModel(formData.value)\r\n    } else {\r\n      response = await createModel(formData.value)\r\n    }\r\n    \r\n    // 根据后端规范检查业务状态码\r\n    if (response.data.code !== 1) {\r\n      throw new Error(response.data.msg || '操作失败')\r\n    }\r\n    \r\n    ElMessage.success(formData.value.id ? '更新成功' : '创建成功')\r\n    dialogVisible.value = false\r\n    fetchModels()\r\n  } catch (error) {\r\n    // 优先显示后端返回的错误信息\r\n    const message = error.response?.data?.msg || error.message\r\n    ElMessage.error(`操作失败：${message}`)\r\n    \r\n    // 特定错误处理（如重复名称）\r\n    if (message.includes('已存在')) {\r\n      formData.value.modelName = ''\r\n    }\r\n  }\r\n}\r\n</script>","import script from \"./ModelManageView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ModelManageView.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["getModelPage","params","request","get","deleteModels","ids","delete","paramsSerializer","indexes","createModel","data","post","updateModel","put","getModelDetail","id","pageNo","ref","pageSize","total","models","loading","dialogVisible","formData","modelName","baseUrl","apiKey","selectedIds","fetchModels","async","value","res","records","error","ElMessage","watch","handleSelectionChange","selection","map","item","handleDelete","ElMessageBox","confirm","confirmButtonText","cancelButtonText","type","success","message","batchDelete","length","warning","handleCreate","handleEdit","row","handleSubmit","response","code","Error","msg","includes","__exports__"],"sourceRoot":""}