{"version":3,"file":"js/357.9332360b.js","mappings":"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","sources":["webpack://teacher-ai/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://teacher-ai/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://teacher-ai/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://teacher-ai/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://teacher-ai/../src/defaults.ts","webpack://teacher-ai/../src/rules.ts","webpack://teacher-ai/../src/helpers.ts","webpack://teacher-ai/../src/Tokenizer.ts","webpack://teacher-ai/../src/Lexer.ts","webpack://teacher-ai/../src/Renderer.ts","webpack://teacher-ai/../src/TextRenderer.ts","webpack://teacher-ai/../src/Parser.ts","webpack://teacher-ai/../src/Hooks.ts","webpack://teacher-ai/../src/Instance.ts","webpack://teacher-ai/../src/marked.ts"],"sourcesContent":["function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","/**\n * Gets the original marked default options.\n */\nexport function _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nexport let _defaults = _getDefaults();\nexport function changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null };\nfunction edit(regex, opt = '') {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(other.caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nexport const other = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n    nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n    hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n    fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n    headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n    htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/\\|table/g, '') // table not in commonmark\n    .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    lheading: lheadingGfm,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n    .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\nconst emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n    .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n    + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    emStrongRDelimAst: emStrongRDelimAstGfm,\n    emStrongLDelim: emStrongLDelimGfm,\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nexport const block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nexport const inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n","import { other } from './rules.ts';\n/**\n * Helpers\n */\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nexport function escape(html, encode) {\n    if (encode) {\n        if (other.escapeTest.test(html)) {\n            return html.replace(other.escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (other.escapeTestNoEncode.test(html)) {\n            return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nexport function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(other.unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nexport function cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(other.percentDecode, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nexport function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(other.splitPipe);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells.at(-1)?.trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nexport function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    if (level > 0) {\n        return -2;\n    }\n    return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport { rtrim, splitCells, findClosingBracket, } from './helpers.ts';\nfunction outputLink(cap, link, raw, lexer, rules) {\n    const href = link.href;\n    const title = link.title || null;\n    const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n    lexer.state.inLink = true;\n    const token = {\n        type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n        raw,\n        href,\n        title,\n        text,\n        tokens: lexer.inlineTokens(text),\n    };\n    lexer.state.inLink = false;\n    return token;\n}\nfunction indentCodeCompensation(raw, text, rules) {\n    const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(rules.other.beginningSpace);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (this.rules.other.endingHash.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (this.rules.other.blockquoteStart.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n                    .replace(this.rules.other.blockquoteSetextReplace2, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = this.rules.other.listItemRegex(bull);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n                    const hrRegex = this.rules.other.hrRegex(indent);\n                    const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n                    const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n                    const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (this.rules.other.doubleBlankLine.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = this.rules.other.listIsTask.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            const lastItem = list.items.at(-1);\n            if (lastItem) {\n                lastItem.raw = lastItem.raw.trimEnd();\n                lastItem.text = lastItem.text.trimEnd();\n            }\n            else {\n                // not a list since there were no items\n                return;\n            }\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!this.rules.other.tableDelimiter.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n        const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (this.rules.other.tableAlignRight.test(align)) {\n                item.align.push('right');\n            }\n            else if (this.rules.other.tableAlignCenter.test(align)) {\n                item.align.push('center');\n            }\n            else if (this.rules.other.tableAlignLeft.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: cap[1],\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex === -2) {\n                    // more open parens than closed\n                    return;\n                }\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = this.rules.other.pedanticHrefTitle.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (this.rules.other.startAngleBracket.test(href)) {\n                if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer, this.rules);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer, this.rules);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n            const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n            const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[1];\n                href = 'mailto:' + text;\n            }\n            else {\n                text = cap[1];\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[0];\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = cap[0];\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            const escaped = this.lexer.state.inRawBlock;\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                escaped,\n            };\n        }\n    }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\n/**\n * Block Lexer\n */\nexport class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            other,\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src.replace(other.carriageReturn, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n        }\n        while (src) {\n            let token;\n            if (this.options.extensions?.block?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.raw.length === 1 && lastToken !== undefined) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    lastToken.raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                const lastToken = tokens.at(-1);\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = cutSrc.length !== src.length;\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match = null;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index)\n                            + '[' + 'a'.repeat(match[0].length - 2) + ']'\n                            + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        let keepPrevChar = false;\n        let prevChar = '';\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            let token;\n            // extensions\n            if (this.options.extensions?.inline?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.type === 'text' && lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { cleanUrl, escape, } from './helpers.ts';\nimport { other } from './rules.ts';\n/**\n * Renderer\n */\nexport class _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(other.notSpaceStart)?.[0];\n        const code = text.replace(other.endingNewline, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(langString)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens[0]?.type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n                        item.tokens[0].tokens[0].escaped = true;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                        escaped: true,\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${escape(text, true)}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + (escape(title)) + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text, tokens }) {\n        if (tokens) {\n            text = this.parser.parseInline(tokens, this.parser.textRenderer);\n        }\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return escape(text);\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${escape(title)}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens\n            ? this.parser.parseInline(token.tokens)\n            : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n    }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer = this.renderer) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nexport class _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nexport class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport { _getDefaults, changeDefaults, _defaults, } from './defaults.ts';\nconst markedInstance = new Marked();\nexport function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\n"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","toPrimitive","t","r","e","i","call","TypeError","String","Number","toPropertyKey","_defineProperty","Object","defineProperty","value","enumerable","configurable","writable","_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","noopTest","exec","edit","regex","opt","source","obj","replace","name","val","valSource","other","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","bull","nextBulletRegex","indent","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","newline","blockCode","fences","hr","heading","bullet","lheadingCore","lheading","lheadingGfm","_paragraph","blockText","_blockLabel","def","list","_tag","_comment","html","paragraph","blockquote","blockNormal","code","table","text","gfmTable","blockGfm","blockPedantic","escape$1","inlineCode","br","inlineText","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","_punctuationOrSpaceGfmStrongEm","_notPunctuationOrSpaceGfmStrongEm","blockSkip","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAstCore","emStrongRDelimAst","emStrongRDelimAstGfm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","tag","_inlineLabel","link","reflink","nolink","reflinkSearch","inlineNormal","_backpedal","del","escape","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","getEscapeReplacement","ch","encode","test","cleanUrl","href","encodeURI","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","trim","shift","length","at","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","charAt","slice","findClosingBracket","b","indexOf","level","outputLink","cap","raw","lexer","rules","title","state","inLink","token","type","tokens","inlineTokens","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","this","space","src","codeBlockStyle","lang","trimmed","depth","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","repeat","nextLine","trimStart","search","rawLine","nextLineWithoutTabs","ischecked","istask","task","checked","lastItem","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","toLowerCase","headers","aligns","rows","item","header","align","cell","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","links","linkString","emStrong","maskedSrc","prevChar","nextChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","_Lexer","create","inlineQueue","lex","lexInline","next","lastParagraphClipped","extTokenizer","undefined","cutSrc","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keys","includes","lastIndexOf","keepPrevChar","startInline","_Renderer","langString","body","parser","parse","parseInline","j","listitem","startAttr","itemBody","checkbox","unshift","tablecell","tablerow","k","content","strong","em","cleanHref","out","image","textRenderer","_TextRenderer","_Parser","anyToken","renderers","genericToken","ret","textToken","_Hooks","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","Set","Marked","args","setOptions","parseMarkdown","use","callback","values","concat","tableToken","listToken","defaults","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","blockType","origOpt","throwError","onError","toString","all","catch","message","msg","reject","markedInstance","marked","getDefaults","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks"],"sourceRoot":""}